// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  result      Result[]
  examSession ExamSession[]
  Leaderboard Leaderboard[]
}

model Exam {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  duration    Int
  startTime   DateTime?
  endTime     DateTime?
  question    Question[]
  Submission  Submission[]
  result      Result[]
  examSession ExamSession[]

  status       ExamStatus    @default(DRAFT)
  passingScore Int?
  Leaderboard  Leaderboard[]
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  COMPLETED
}

model Question {
  id            Int             @id @default(autoincrement())
  examId        Int
  exam          Exam            @relation(fields: [examId], references: [id])
  questionText  String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer QuestionOption
  submission    Submission[]
  questionOrder QuestionOrder[]

  type QuestionType @default(MULTIPLE_CHOICE)
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  ESSAY
}

enum QuestionOption {
  A
  B
  C
  D
}

model ExamSession {
  id             Int       @id @default(autoincrement())
  startTime      DateTime
  endTime        DateTime?
  isFinished     Boolean   @default(false)
  TotalTimeSpent Int?

  currentQuestionId Int @default(1)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  examId Int
  exam   Exam @relation(fields: [examId], references: [id])

  status ExamSessionStatus @default(ONGOING)

  submission    Submission[]
  questionOrder QuestionOrder[]
}

enum ExamSessionStatus {
  ONGOING
  FINISHED
}

model Submission {
  id             Int         @id @default(autoincrement())
  selectedAnswer String?
  orderIndex     Int
  examSessionId  Int
  examSession    ExamSession @relation(fields: [examSessionId], references: [id])
  questionId     Int
  question       Question    @relation(fields: [questionId], references: [id])
  isSkipped      Boolean     @default(false)
  isCorrect      Boolean?
  Exam           Exam        @relation(fields: [examId], references: [id])
  examId         Int

  @@unique([examSessionId, questionId])
}

model Result {
  id           Int           @id @default(autoincrement())
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  examId       Int
  exam         Exam          @relation(fields: [examId], references: [id])
  totalScore   Int
  correctCount Int
  wrongCount   Int
  skippedCount Int
  position     Int
  Leaderboard  Leaderboard[]
}

model Leaderboard {
  id     String @id @default(uuid())
  userId Int
  user   User   @relation(fields: [userId], references: [id])

  examId Int
  exam   Exam @relation(fields: [examId], references: [id])

  result   Result @relation(fields: [resultId], references: [id])
  resultId Int

  position  Int
  timeSpent Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([examId, userId])
}

model QuestionOrder {
  id            Int         @id @default(autoincrement())
  examSessionId Int
  examSession   ExamSession @relation(fields: [examSessionId], references: [id])
  questionId    Int
  question      Question    @relation(fields: [questionId], references: [id])
  orderIndex    Int

  @@unique([examSessionId, questionId])
  @@unique([examSessionId, orderIndex])
}
